// ==========================================
// Hajimi GRE 题库数据库 Schema
// 基于真实JSON数据优化设计
// 创建时间: 2025-10-05
// 版本: 2.0
// ==========================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ==========================================
// 核心表1: 题目表 (Questions)
// ==========================================
model Question {
  id        String   @id @default(cuid())
  
  // 业务标识
  uuid      String   @unique  // 如: "q_s1t1s1q1_victorians"
  sourceId  String   @map("source_id")  // 如: "Stage 1 Test 1 Section 1-1"
  version   Float    @default(1.0)
  
  // 题目基本信息
  questionText    String   @map("question_text") @db.Text
  correctAnswer   String   @map("correct_answer")  // 如: "B" 或 "C, E"
  
  // 难度信息（扁平化存储）
  difficultyLevel   String   @map("difficulty_level")  // "Easy", "Medium", "Hard"
  difficultyScore   Float    @map("difficulty_score")  // 1.0 - 10.0
  sentenceComplexity String  @map("sentence_complexity")  // "高", "中", "低"
  vocabRarity       String   @map("vocab_rarity")  // "高", "中", "低"
  logicSubtlety     String   @map("logic_subtlety")  // "高", "中", "低"
  
  // 解析内容（JSON存储，保持灵活性）
  analysis  Json  // 完整的analysis对象
  
  // 审计字段
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // 关联关系
  options       QuestionOption[]
  vocabularies  QuestionVocabulary[]
  
  @@map("questions")
  @@index([uuid])
  @@index([sourceId])
  @@index([difficultyLevel])
}

// ==========================================
// 核心表2: 选项表 (Question Options)
// ==========================================
// 为什么独立存储？方便查询和统计
model QuestionOption {
  id         String   @id @default(cuid())
  questionId String   @map("question_id")
  
  choice     String   // "A", "B", "C", etc.
  text       String   @db.Text
  isCorrect  Boolean  @map("is_correct")
  
  // 选项分析（从analysis.optionsAnalysis提取）
  analysisText String?  @map("analysis_text") @db.Text
  trapTypes    String[] @map("trap_types")  // 陷阱类型数组
  
  // 关联
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now()) @map("created_at")
  
  @@unique([questionId, choice])
  @@map("question_options")
  @@index([questionId])
}

// ==========================================
// 核心表3: 词汇表 (Vocabularies)
// ==========================================
// 全局唯一，避免重复
model Vocabulary {
  id       String   @id @default(cuid())
  
  // 业务标识
  uuid     String   @unique  // 如: "v_20250921_paradox"
  word     String   @unique  // 核心：确保单词唯一
  version  Float    @default(1.0)
  
  // 基本信息
  phonetic      String?
  definitionCn  String   @map("definition_cn") @db.Text
  
  // 词源信息（JSON存储）
  etymology     Json?  // { deconstruction, constructive_essence }
  
  // 同源词（JSON数组）
  cognates      Json?  // [{ word, definition_cn }]
  
  // 例句
  exampleSentence     String?  @map("example_sentence") @db.Text
  exampleTranslation  String?  @map("example_translation") @db.Text
  
  // 审计字段
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // 关联
  questions QuestionVocabulary[]
  
  @@map("vocabularies")
  @@index([word])
}

// ==========================================
// 关联表: 题目-词汇 (Many-to-Many)
// ==========================================
model QuestionVocabulary {
  id           String   @id @default(cuid())
  questionId   String   @map("question_id")
  vocabularyId String   @map("vocabulary_id")
  
  // 额外信息：该词在题目中的角色
  role         String?  // "题干词汇", "选项词汇", "核心词汇"
  
  // 关联
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  vocabulary   Vocabulary @relation(fields: [vocabularyId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now()) @map("created_at")
  
  @@unique([questionId, vocabularyId])
  @@map("question_vocabularies")
  @@index([questionId])
  @@index([vocabularyId])
}

// ==========================================
// 扩展表1: 逻辑类型统计 (可选)
// ==========================================
model LogicType {
  id          String   @id @default(cuid())
  
  officialTag String   @unique @map("official_tag")  // 如: "contrast-paradox"
  nameCn      String   @map("name_cn")  // "意外/悖论逻辑"
  description String?  @db.Text
  
  // 统计信息
  questionCount Int    @default(0) @map("question_count")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("logic_types")
}

// ==========================================
// 扩展表2: 陷阱类型统计 (可选)
// ==========================================
model TrapType {
  id          String   @id @default(cuid())
  
  code        String   @unique  // 如: "Logic Reversal"
  nameCn      String   @map("name_cn")  // "反向逻辑"
  description String?  @db.Text
  
  // 统计信息
  occurrenceCount Int  @default(0) @map("occurrence_count")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("trap_types")
}

// ==========================================
// 扩展表3: 同义/反义词关系 (可选)
// ==========================================
model WordRelation {
  id         String   @id @default(cuid())
  
  type       String   // "synonym" or "antonym"
  conceptCn  String   @map("concept_cn")  // 如: "屈服"
  word1      String
  word2      String
  sourceId   String?  @map("source_id")  // 来源题目
  
  createdAt  DateTime @default(now()) @map("created_at")
  
  @@map("word_relations")
  @@index([type])
  @@index([word1])
  @@index([word2])
}

// ==========================================
// 用户相关表（预留）
// ==========================================
model User {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")  // Supabase Auth ID
  username  String?  @unique
  email     String   @unique
  
  // 学习数据
  targetScore Int?   @map("target_score")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // 关联
  practices UserPractice[]
  
  @@map("users")
}

// ==========================================
// 用户练习记录（预留）
// ==========================================
model UserPractice {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  questionId String   @map("question_id")
  
  userAnswer String?  @map("user_answer")
  isCorrect  Boolean  @map("is_correct")
  timeSpent  Int?     @map("time_spent")  // 秒
  
  // 关联
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now()) @map("created_at")
  
  @@map("user_practices")
  @@index([userId])
  @@index([questionId])
}
