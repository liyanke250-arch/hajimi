generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Question {
  id                 String               @id @default(cuid())
  uuid               String               @unique
  sourceId           String               @map("source_id")
  version            Float?               @default(1.0)
  questionText       String               @map("question_text")
  correctAnswer      String               @map("correct_answer")
  difficultyLevel    String               @map("difficulty_level")
  difficultyScore    Float                @map("difficulty_score")
  sentenceComplexity String               @map("sentence_complexity")
  vocabRarity        String               @map("vocab_rarity")
  logicSubtlety      String               @map("logic_subtlety")
  analysis           Json
  createdAt          DateTime?            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  options            QuestionOption[]
  vocabularies       QuestionVocabulary[]
  user_practices     UserPractice[]

  @@index([difficultyLevel], map: "idx_questions_difficulty")
  @@index([sourceId], map: "idx_questions_source_id")
  @@index([uuid], map: "idx_questions_uuid")
  @@map("questions")
}

model QuestionOption {
  id           String    @id @default(cuid())
  questionId   String    @map("question_id")
  choice       String
  text         String
  isCorrect    Boolean   @map("is_correct")
  analysisText String?   @map("analysis_text")
  trapTypes    String[]  @map("trap_types")
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  question     Question  @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([questionId, choice])
  @@index([questionId], map: "idx_question_options_question_id")
  @@map("question_options")
}

model Vocabulary {
  id                 String               @id @default(cuid())
  uuid               String               @unique
  word               String               @unique
  version            Float?               @default(1.0)
  phonetic           String?
  definitionCn       String               @map("definition_cn")
  etymology          Json?
  cognates           Json?
  exampleSentence    String?              @map("example_sentence")
  exampleTranslation String?              @map("example_translation")
  usage_count        Int?                 @default(0)
  createdAt          DateTime?            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  questions          QuestionVocabulary[]

  @@index([word], map: "idx_vocabularies_word")
  @@map("vocabularies")
}

model QuestionVocabulary {
  id           String     @id @default(cuid())
  questionId   String     @map("question_id")
  vocabularyId String     @map("vocabulary_id")
  role         String?    @default("general")
  createdAt    DateTime?  @default(now()) @map("created_at") @db.Timestamptz(6)
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  vocabulary   Vocabulary @relation(fields: [vocabularyId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([questionId, vocabularyId])
  @@index([questionId], map: "idx_qv_question_id")
  @@index([vocabularyId], map: "idx_qv_vocabulary_id")
  @@map("question_vocabularies")
}

model LogicType {
  id            String    @id @default(cuid())
  officialTag   String    @unique @map("official_tag")
  nameCn        String    @map("name_cn")
  description   String?
  questionCount Int?      @default(0) @map("question_count")
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("logic_types")
}

model TrapType {
  id              String    @id @default(cuid())
  code            String    @unique
  nameCn          String    @map("name_cn")
  description     String?
  occurrenceCount Int?      @default(0) @map("occurrence_count")
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("trap_types")
}

model WordRelation {
  id        String    @id @default(cuid())
  type      String
  conceptCn String    @map("concept_cn")
  word1     String
  word2     String
  sourceId  String?   @map("source_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([type], map: "idx_word_relations_type")
  @@index([word1], map: "idx_word_relations_word1")
  @@index([word2], map: "idx_word_relations_word2")
  @@map("word_relations")
}

model User {
  id          String         @id @default(cuid())
  userId      String         @unique @map("user_id")
  username    String?        @unique
  email       String         @unique
  targetScore Int?           @map("target_score")
  createdAt   DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  practices   UserPractice[]

  @@map("users")
}

model UserPractice {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  questionId String    @map("question_id")
  userAnswer String?   @map("user_answer")
  isCorrect  Boolean   @map("is_correct")
  timeSpent  Int?      @map("time_spent")
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  questions  Question  @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([createdAt], map: "idx_user_practices_created_at")
  @@index([questionId], map: "idx_user_practices_question_id")
  @@index([userId], map: "idx_user_practices_user_id")
  @@map("user_practices")
}
